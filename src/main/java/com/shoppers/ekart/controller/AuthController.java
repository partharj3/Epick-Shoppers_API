package com.shoppers.ekart.controller;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.shoppers.ekart.requestdto.AuthRequest;
import com.shoppers.ekart.requestdto.OtpModel;
import com.shoppers.ekart.requestdto.UserRequest;
import com.shoppers.ekart.responsedto.AuthResponse;
import com.shoppers.ekart.responsedto.UserResponse;
import com.shoppers.ekart.service.AuthService;
import com.shoppers.ekart.util.ResponseStructure;
import com.shoppers.ekart.util.SimpleResponseStructure;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.validation.Valid;
import lombok.AllArgsConstructor;

@RestController
@AllArgsConstructor
@RequestMapping("/api/v1")
@CrossOrigin(allowCredentials = "true", origins = "http://localhost:5173/") // credentials -> cookies from frontend
public class AuthController {
	
	private AuthService authService;
	
	@PostMapping("/register")
	public ResponseEntity<ResponseStructure<String>> registerUser(@RequestBody @Valid UserRequest request){
		return authService.registerUser(request);
	}
	
	@PostMapping("/verify-otp")
	public ResponseEntity<ResponseStructure<UserResponse>> verifyOTP(@RequestBody OtpModel otp){
		return authService.verifyOTP(otp);
	}
	
	/**
	 * This HttpServletResponse will be generated by the response.
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@PostMapping("/login")
	public ResponseEntity<ResponseStructure<AuthResponse>> login(
			@CookieValue(name="at", required = false) String accessToken,
			@CookieValue(name="rt", required = false) String refreshToken, 
			@RequestBody AuthRequest request, HttpServletResponse response){
		return authService.login(accessToken, refreshToken,request,response);
	}
	
//	@PostMapping("/traditional-logout")
	public ResponseEntity<String> traditionalLogout(HttpServletRequest request, HttpServletResponse response){
		return authService.traditionalLogout(request,response);
	}
	
	@PostMapping("/logout")
	public ResponseEntity<SimpleResponseStructure> logout(@CookieValue(name = "at", required = false) 
		String accessToken, @CookieValue(name = "rt", required = false) String refreshToken, HttpServletResponse response){
		return authService.logout(accessToken, refreshToken,response);
	}

	@PostMapping("/revoke-others-access")
	public ResponseEntity<SimpleResponseStructure> revokeOtherDevicesAccess(@CookieValue(name = "at", required = false) 
		String accessToken, @CookieValue(name = "rt", required = false) String refreshToken, HttpServletResponse response){
		return authService.revokeOtherDevicesAccess(accessToken, refreshToken,response);
	}
	
	@PostMapping("/revoke-all-access")
	public ResponseEntity<SimpleResponseStructure> revokeAllDevicesAccess(@CookieValue(name="at", required=false) 
	   String accessToken, @CookieValue(name="rt",required = false) String refreshToken, HttpServletResponse response){
		return authService.revokeAllDevicesAccess(accessToken,refreshToken,response);
	}
	
	@PostMapping("/refresh-login")
	public ResponseEntity<ResponseStructure<AuthResponse>> refreshLogin(@CookieValue(name="at", required=false) 
	   String accessToken, @CookieValue(name="rt",required = false) String refreshToken, HttpServletResponse response){
		return authService.refreshLogin(accessToken,refreshToken,response);
	}
}
